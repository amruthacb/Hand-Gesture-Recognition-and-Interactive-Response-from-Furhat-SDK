# -*- coding: utf-8 -*-
"""new_svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lJseRv96HEGI-icKaCZ9dZmxRDzqx1ZU
"""

#following
#https://colab.research.google.com/github/WaiYanNyeinNaing/FashionMNIST_GoogleCloud_TPU/blob/master/FashionMnist_Cloud.ipynb#scrollTo=ymLIUGai4oqJ
#https://www.youtube.com/watch?v=7sz4WpkUIIs  >> @36:56
!pip install scikit-plot

#!pip install scikit-plot

import csv
import numpy as np
import cv2
import os, shutil
from matplotlib import image
from matplotlib import pyplot
from scikitplot.estimators import plot_feature_importances
from scikitplot.metrics import plot_confusion_matrix, plot_roc
import tensorflow as tf
import numpy as np
import sklearn as sk
from sklearn.datasets import make_classification
import scikitplot as skplt
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler,OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import cross_val_score


df = pd.read_csv('Training_Given_Dataset_Subsystem_2.csv') 
X = df.iloc[0:,5:].values 
X=X.astype(float)
Y = df.iloc[:,2]

#labelencoder_Y = LabelEncoder()
#Y= labelencoder_Y.fit_transform(y)
#Y=onehotencoder=pd.get_dummies(y)
#df = pd.read_csv('open_palm_simi_test1.csv') 
#X_test= df.iloc[0:,:].values 

from sklearn.metrics import confusion_matrix
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.33,random_state=42,shuffle=False)
# Run classifier, using a model that is too regularized (C too low) to see
# the impact on the results
model = SVC(kernel = 'linear', C = 1).fit(X_train,y_train) 
predictions = model.predict(X_test) 
# creating a confusion matrix 
cm = plot_confusion_matrix(y_test, predictions) 
########################################
#file1 = open("result.txt","w+") 
#file1.write(predictions[1]) #this will give predicted guesture as output to the text file
#file1.close()

import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = [10, 10]
labels = ['fist_palm','fist_dorsal','open_palm','open_dorsal','three_fingers_dorsal','three_fingers_palm']
sk.metrics.plot_confusion_matrix(model, 
                                 X_test, 
                                 y_test, 
                                 normalize="pred",
                                 display_labels = labels
                                )
plt.show()

import pickle

#
# Create your model here (same as above)
#

# Save to file in the current working directory
pk_file = "Pred_model.pkl"
with open(pk_file, 'wb') as file:
    pickle.dump(model, file)

# Load from file
#with open(pkl_filename, 'rb') as file:
 #   pickle_model = pickle.load(file)
    
# Calculate the accuracy score and predict target values
#score = pickle_model.score(Xtest, Ytest)
#print("Test score: {0:.2f} %".format(100 * predictions))
#Ypredict = pickle_model.predict(Xtest)

#knn 
import csv
import numpy as np
import cv2
import os, shutil
from matplotlib import image
from matplotlib import pyplot
from scikitplot.estimators import plot_feature_importances
from scikitplot.metrics import plot_confusion_matrix, plot_roc
import tensorflow as tf
import numpy as np
import sklearn as sk
from sklearn.datasets import make_classification
import scikitplot as skplt
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler,OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import cross_val_score


df = pd.read_csv('Training_Given_Dataset_Subsystem_2.csv') 
X = df.iloc[0:,5:].values 
X=X.astype(float)
Y = df.iloc[:,2]
#labelencoder_Y = LabelEncoder()
#Y= labelencoder_Y.fit_transform(y)
#Y=onehotencoder=pd.get_dummies(y)

df = pd.read_csv('open_palm_simi_test1.csv') 
X_test= df.iloc[0:,:].values 

from sklearn.metrics import confusion_matrix
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.33,random_state=42,shuffle=False)
from sklearn.neighbors import KNeighborsClassifier 
knn = KNeighborsClassifier(n_neighbors =10).fit(X_train, y_train) # for k<10 and k>400 - accuracy slightly decreases by point %
  
# accuracy on X_test 
accuracy = knn.score(X_test, y_test) 
print(accuracy)
  
# creating a confusion matrix 
knn_predictions = knn.predict(X_test)  
cm =plot_confusion_matrix(y_test, knn_predictions) 
import pickle

#
# Create your model here (same as above)
#

# Save to file in the current working directory
pk_file = "Pred_model_knn.pkl"
with open(pk_file, 'wb') as file:
    pickle.dump(knn, file)

import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = [10, 10]
labels = ['fist_palm','fist_dorsal','open_palm','open_dorsal','three_fingers_dorsal','three_fingers_palm']
sk.metrics.plot_confusion_matrix(knn, 
                                 X_test, 
                                 y_test, 
                                 normalize="pred",
                                 display_labels = labels
                                )
plt.show()